import datetime
from decimal import Decimal

from django.test import TestCase
from django.utils.timezone import make_aware

from chat_wars_database.app.business_exchange.business import get_exchange_data
from chat_wars_database.app.business_exchange.management.commands.calculate_statistics import apply_regex_for_each_line
from chat_wars_database.app.business_exchange.management.commands.calculate_statistics import calculate
from chat_wars_database.app.business_exchange.models import ExchangeMessages
from chat_wars_database.app.business_exchange.models import StatsByDay


class TestCalculateExchangeCommands(TestCase):
    def test_regex_should_extract_correct_information(self):

        self.assertEqual(apply_regex_for_each_line("ü•îSmashinDeezNuts => ü•îMalte, 1 x 1üí∞").group("quantity"), "1")
        self.assertEqual(apply_regex_for_each_line("ü¶åwhitetale => üåëTaneleer Tivan, 15 x 5üí∞").group("quantity"), "15")
        self.assertEqual(apply_regex_for_each_line("üåëMinion => ü¶ÖLuluVi0, 1 x 7üí∞").group("quantity"), "1")
        self.assertEqual(apply_regex_for_each_line("üåëMinion => ü¶àMinie, 3 x 7üí∞").group("quantity"), "3")
        self.assertEqual(apply_regex_for_each_line("üåëMinion => üêâRasputin, 10 x 7üí∞").group("quantity"), "10")
        self.assertEqual(apply_regex_for_each_line("ü•îMalte => üêâSun Wokong, 15 x 6üí∞").group("quantity"), "15")
        self.assertEqual(apply_regex_for_each_line("üê∫Silverstream => üêâSun Wokong, 30 x 6üí∞").group("quantity"), "30")
        self.assertEqual(apply_regex_for_each_line("üê∫MegaDeth => ü•îMalte, 1 x 100üí∞").group("quantity"), "1")
        self.assertEqual(apply_regex_for_each_line("ü¶åIlvatar => ü•îMalte, 573 x 1üí∞").group("quantity"), "573")
        self.assertEqual(apply_regex_for_each_line("ü•îMORGANA => üê∫PABLO ESCOBAR, 1 x 2üí∞").group("quantity"), "1")
        self.assertEqual(apply_regex_for_each_line("üêâiBittz => üê∫Silverstream, 13 x 6üí∞").group("quantity"), "13")
        self.assertEqual(apply_regex_for_each_line("ü•îMoka => ü•îMalte, 1 x 31üí∞").group("quantity"), "1")

        self.assertEqual(apply_regex_for_each_line("ü•îSmashinDeezNuts => ü•îMalte, 1 x 1üí∞").group("value"), "1")
        self.assertEqual(apply_regex_for_each_line("ü¶åwhitetale => üåëTaneleer Tivan, 15 x 5üí∞").group("value"), "5")
        self.assertEqual(apply_regex_for_each_line("üåëMinion => ü¶ÖLuluVi0, 1 x 7üí∞").group("value"), "7")
        self.assertEqual(apply_regex_for_each_line("üåëMinion => ü¶àMinie, 3 x 7üí∞").group("value"), "7")
        self.assertEqual(apply_regex_for_each_line("üåëMinion => üêâRasputin, 10 x 7üí∞").group("value"), "7")
        self.assertEqual(apply_regex_for_each_line("ü•îMalte => üêâSun Wokong, 15 x 6üí∞").group("value"), "6")
        self.assertEqual(apply_regex_for_each_line("üê∫Silverstream => üêâSun Wokong, 30 x 6üí∞").group("value"), "6")
        self.assertEqual(apply_regex_for_each_line("üê∫MegaDeth => ü•îMalte, 1 x 1üí∞").group("value"), "1")
        self.assertEqual(apply_regex_for_each_line("ü¶åIlvatar => ü•îMalte, 1 x 100üí∞").group("value"), "100")
        self.assertEqual(apply_regex_for_each_line("ü•îMORGANA => üê∫PABLO ESCOBAR, 1 x 2üí∞").group("value"), "2")
        self.assertEqual(apply_regex_for_each_line("üêâiBittz => üê∫Silverstream, 13 x 6üí∞").group("value"), "6")
        self.assertEqual(apply_regex_for_each_line("ü•îMoka => ü•îMalte, 1 x 31üí∞").group("value"), "31")

        self.assertEqual(apply_regex_for_each_line("ü•îSmashinDeezNuts => ü•îMalte, 1 x 1üí∞").group()[3], "ü•î")
        self.assertEqual(apply_regex_for_each_line("ü¶åwhitetale => üåëTaneleer Tivan, 15 x 5üí∞").group()[3], "üåë")
        self.assertEqual(apply_regex_for_each_line("üåëMinion => ü¶ÖLuluVi0, 1 x 7üí∞").group()[3], "ü¶Ö")
        self.assertEqual(apply_regex_for_each_line("üåëMinion => ü¶àMinie, 3 x 7üí∞").group()[3], "ü¶à")
        self.assertEqual(apply_regex_for_each_line("üåëMinion => üêâRasputin, 10 x 7üí∞").group()[3], "üêâ")
        self.assertEqual(apply_regex_for_each_line("ü•îMalte => üêâSun Wokong, 15 x 6üí∞").group()[3], "üêâ")
        self.assertEqual(apply_regex_for_each_line("üê∫Silverstream => üêâSun Wokong, 30 x 6üí∞").group()[3], "üêâ")
        self.assertEqual(apply_regex_for_each_line("üê∫MegaDeth => ü•îMalte, 1 x 1üí∞").group()[3], "ü•î")
        self.assertEqual(apply_regex_for_each_line("ü¶åIlvatar => ü•îMalte, 1 x 1üí∞").group()[3], "ü•î")
        self.assertEqual(apply_regex_for_each_line("ü•îMORGANA => üê∫PABLO ESCOBAR, 1 x 2üí∞").group()[3], "üê∫")
        self.assertEqual(apply_regex_for_each_line("üêâiBittz => üê∫Silverstream, 13 x 6üí∞").group()[3], "üê∫")
        self.assertEqual(apply_regex_for_each_line("ü•îMoka => ü•îMalte, 1 x 31üí∞").group()[3], "ü•î")

    def test_should_create_daily_stats_1(self):
        dt = make_aware(datetime.datetime(1981, 6, 21)).date()
        ExchangeMessages.objects.create(
            message_id=1,
            message_date=dt,
            message_text="""Pelt:
ü¶åMedivh => üê∫Bloodhunter, 1 x 2üí∞
üê∫Zafit => üê∫Bloodhunter, 2 x 1üí∞
Coal:
üåëTaneleer Tivan => ü•îMalte, 2 x 10üí∞
üê∫GrumpyGecko => ü•îMalte, 2 x 1üí∞""",
        )

        calculate(dt)

        self.assertEqual(StatsByDay.objects.count(), 2)

        st: StatsByDay = StatsByDay.objects.filter(item__name="Pelt").first()

        self.assertEqual(st.date, dt)
        self.assertEqual(st.min_value, 1)
        self.assertEqual(st.max_value, 2)
        self.assertEqual(st.units, 3)

        self.assertEqual(st.deerhorn_castle_seller, 1)
        self.assertEqual(st.deerhorn_castle_buyer, 0)
        self.assertEqual(st.dragonscale_castle_seller, 0)
        self.assertEqual(st.dragonscale_castle_buyer, 0)
        self.assertEqual(st.highnest_castle_seller, 0)
        self.assertEqual(st.highnest_castle_buyer, 0)
        self.assertEqual(st.moonlight_castle_seller, 0)
        self.assertEqual(st.moonlight_castle_buyer, 0)
        self.assertEqual(st.potato_castle_seller, 0)
        self.assertEqual(st.potato_castle_buyer, 0)
        self.assertEqual(st.sharkteeth_castle_seller, 0)
        self.assertEqual(st.sharkteeth_castle_buyer, 0)
        self.assertEqual(st.wolfpack_castle_seller, 2)
        self.assertEqual(st.wolfpack_castle_buyer, 3)

        self.assertAlmostEquals(st.average_value, Decimal(1.33))
        self.assertEqual(st.mean_value, 1)

        st: StatsByDay = StatsByDay.objects.filter(item__name="Coal").first()

        self.assertEqual(st.date, dt)
        self.assertEqual(st.min_value, 1)
        self.assertEqual(st.max_value, 10)
        self.assertEqual(st.units, 4)

        self.assertEqual(st.deerhorn_castle_seller, 0)
        self.assertEqual(st.deerhorn_castle_buyer, 0)
        self.assertEqual(st.dragonscale_castle_seller, 0)
        self.assertEqual(st.dragonscale_castle_buyer, 0)
        self.assertEqual(st.highnest_castle_seller, 0)
        self.assertEqual(st.highnest_castle_buyer, 0)
        self.assertEqual(st.moonlight_castle_seller, 2)
        self.assertEqual(st.moonlight_castle_buyer, 0)
        self.assertEqual(st.potato_castle_seller, 0)
        self.assertEqual(st.potato_castle_buyer, 4)
        self.assertEqual(st.sharkteeth_castle_seller, 0)
        self.assertEqual(st.sharkteeth_castle_buyer, 0)
        self.assertEqual(st.wolfpack_castle_seller, 2)
        self.assertEqual(st.wolfpack_castle_buyer, 0)

        self.assertAlmostEquals(st.average_value, Decimal(5.5))
        self.assertEqual(st.mean_value, 5)

    def test_should_create_daily_stats_2(self):
        dt = make_aware(datetime.datetime(1981, 6, 21)).date()
        ExchangeMessages.objects.create(
            message_id=1,
            message_date=dt,
            message_text="""Stick:
üê∫Sayur Kol => ü¶àGodo, 5 x 1üí∞
üê∫Sayur Kol => ü¶àGodo, 5 x 1üí∞
Thread:
ü¶åmetal queen => üåëhasserodeer, 18 x 6üí∞
ü¶åmetal queen => üåëTarkus, 50 x 6üí∞
ü¶åmetal queen => üåëTarkus, 32 x 6üí∞
Metal plate:
üåëebonyhoof => üê∫Bl4ckBull, 9 x 7üí∞
Bone:
üê∫Hyx_Death_Knight => üê∫Arthas_Lich_King, 1 x 123üí∞
üê∫Hyx_Death_Knight => üê∫Dettlaf, 1 x 112üí∞
üê∫Hyx_Death_Knight => üê∫Unstoppable, 1 x 244üí∞
Rope:
ü¶åUP aGAIN oo => üê∫Bl4ckBull, 7 x 5üí∞""",
        )
        ExchangeMessages.objects.create(
            message_id=2,
            message_date=dt,
            message_text="""Thread:
üê∫Anshultz => üêâConnor Kenway, 10 x 6üí∞
üåëbrok => üê∫vincent, 1 x 7üí∞
üåëMinion => üê∫vincent, 1 x 7üí∞
üåëMinion => üê∫vincent, 1 x 7üí∞
üê∫Anshultz => üåëTarkus, 25 x 6üí∞
üê∫Anshultz => üåëTarkus, 48 x 6üí∞
üåëbrok => üêâSagasuGin, 4 x 7üí∞
Bone:
üê∫Meliodas Son-DOC => üêâa porn star, 1 x 16üí∞""",
        )
        calculate(dt)

        self.assertEqual(StatsByDay.objects.count(), 5)

        st: StatsByDay = StatsByDay.objects.filter(item__name="Bone").first()

        self.assertEqual(st.date, dt)
        self.assertEqual(st.min_value, 16)
        self.assertEqual(st.max_value, 244)
        self.assertEqual(st.units, 4)

        # self.assertEqual(st.deerhorn_castle_seller, 1)
        # self.assertEqual(st.deerhorn_castle_buyer, 0)
        # self.assertEqual(st.dragonscale_castle_seller, 0)
        # self.assertEqual(st.dragonscale_castle_buyer, 0)
        # self.assertEqual(st.highnest_castle_seller, 0)
        # self.assertEqual(st.highnest_castle_buyer, 0)
        # self.assertEqual(st.moonlight_castle_seller, 0)
        # self.assertEqual(st.moonlight_castle_buyer, 0)
        # self.assertEqual(st.potato_castle_seller, 0)
        # self.assertEqual(st.potato_castle_buyer, 0)
        # self.assertEqual(st.sharkteeth_castle_seller, 0)
        # self.assertEqual(st.sharkteeth_castle_buyer, 0)
        # self.assertEqual(st.wolfpack_castle_seller, 2)
        # self.assertEqual(st.wolfpack_castle_buyer, 3)
        #
        # self.assertAlmostEquals(st.average_value, Decimal(1.33))
        # self.assertEqual(st.mean_value, 1)
        #
        # st: StatsByDay = StatsByDay.objects.filter(item__name="Coal").first()
        #
        # self.assertEqual(st.date, dt)
        # self.assertEqual(st.min_value, 1)
        # self.assertEqual(st.max_value, 10)
        # self.assertEqual(st.units, 4)
        #
        # self.assertEqual(st.deerhorn_castle_seller, 0)
        # self.assertEqual(st.deerhorn_castle_buyer, 0)
        # self.assertEqual(st.dragonscale_castle_seller, 0)
        # self.assertEqual(st.dragonscale_castle_buyer, 0)
        # self.assertEqual(st.highnest_castle_seller, 0)
        # self.assertEqual(st.highnest_castle_buyer, 0)
        # self.assertEqual(st.moonlight_castle_seller, 2)
        # self.assertEqual(st.moonlight_castle_buyer, 0)
        # self.assertEqual(st.potato_castle_seller, 0)
        # self.assertEqual(st.potato_castle_buyer, 4)
        # self.assertEqual(st.sharkteeth_castle_seller, 0)
        # self.assertEqual(st.sharkteeth_castle_buyer, 0)
        # self.assertEqual(st.wolfpack_castle_seller, 2)
        # self.assertEqual(st.wolfpack_castle_buyer, 0)
        #
        # self.assertAlmostEquals(st.average_value, Decimal(5.5))
        # self.assertEqual(st.mean_value, 5)
