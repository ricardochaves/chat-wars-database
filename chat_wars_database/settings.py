"""
Django settings for chat_wars_database project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from typing import Optional

from chat_wars_database.app.setup.log import JsonFormatter

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# SECURITY WARNING: keep the secret key used in production secret!
DJANGO_SECRET_KEY = os.getenv("SECRET_KEY")
if DJANGO_SECRET_KEY:
    SECRET_KEY = DJANGO_SECRET_KEY
else:
    raise NotImplementedError("You must configure SECRET_KEY!")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False").lower() in ["t", "true", "1"]
COMMAND_CLOSE_CONNECTIONS = os.getenv("COMMAND_CLOSE_CONNECTIONS", "False").lower() in ["t", "true", "1"]

DJANGO_ALLOWED_HOSTS: Optional[str] = os.getenv("ALLOWED_HOSTS")
if DJANGO_ALLOWED_HOSTS:
    ALLOWED_HOSTS = DJANGO_ALLOWED_HOSTS.split(",")
else:
    ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "chat_wars_database.app.business_auction",
    "chat_wars_database.app.business_exchange",
    "chat_wars_database.app.business_core",
    "chat_wars_database.app.game_bot",
    "chat_wars_database.app.web",
    "chat_wars_database.app.guild_helper_bot",
    "health_check",
    "request_id_django_log",
    "django_q",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "request_id_django_log.middleware.RequestIdDjangoLog",
]

ROOT_URLCONF = "chat_wars_database.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "chat_wars_database.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.getenv("DB_DATABASE", os.path.join(BASE_DIR, "db.sqlite3")),
        "USER": os.environ.get("DB_USER"),
        "HOST": os.environ.get("DB_HOST"),
        "PORT": os.environ.get("DB_PORT"),
        "PASSWORD": os.environ.get("DB_PASSWORD"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")


GOOGLE_CLOUD_PROJECT = os.getenv("GOOGLE_CLOUD_PROJECT")

GOOGLE_CLOUD_AUCTION_TOPIC_NAME = os.getenv("GOOGLE_CLOUD_AUCTION_TOPIC_NAME")
GOOGLE_CLOUD_SUBSCRIPTION_NAME = os.getenv("GOOGLE_CLOUD_SUBSCRIPTION_NAME")

GOOGLE_CLOUD_BOT_TOPIC_NAME = os.getenv("GOOGLE_CLOUD_BOT_TOPIC_NAME")
GOOGLE_CLOUD_BOT_SUBSCRIPTION_NAME = os.getenv("GOOGLE_CLOUD_BOT_SUBSCRIPTION_NAME")

REQUEST_ID_CONFIG = {
    "REQUEST_ID_HEADER": "HTTP_X_REQUEST_ID",
    "GENERATE_REQUEST_ID_IF_NOT_FOUND": True,
    "RESPONSE_HEADER_REQUEST_ID": "HTTP_X_REQUEST_ID",
}

LOG_LEVEL = os.getenv("LOG_LEVEL", "DEBUG")
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {"request_id": {"()": "request_id_django_log.filters.RequestIDFilter"}},
    "formatters": {
        "standard": {
            "()": JsonFormatter,
            "format": "%(levelname)-8s [%(asctime)s] [%(request_id)s] %(name)s: %(message)s",
        }
    },
    "handlers": {
        "console": {
            "level": LOG_LEVEL,
            "class": "logging.StreamHandler",
            "filters": ["request_id"],
            "formatter": "standard",
        }
    },
    "loggers": {
        "": {"handlers": ["console"], "level": LOG_LEVEL, "propagate": False},
        "django.request": {"handlers": ["console"], "level": LOG_LEVEL, "propagate": False},
        "root": {"handlers": ["console"], "level": LOG_LEVEL, "propagate": False},
    },
}


TELEGRAM_CLI_NAME = os.getenv("TELEGRAM_CLI_NAME")
TELEGRAM_GAME_BOT_TOKEN = os.getenv("TELEGRAM_GAME_BOT_TOKEN")
TELEGRAM_API_ID = os.getenv("TELEGRAM_API_ID")
TELEGRAM_API_HASH = os.getenv("TELEGRAM_API_HASH")
TELEGRAM_CELL_PHONE = os.getenv("TELEGRAM_CELL_PHONE")
TELEGRAM_STRING = os.getenv("TELEGRAM_STRING")

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

Q_CLUSTER = {
    "name": "Schedule",
    "workers": 1,
    "timeout": 30,
    "retry": 600,
    "queue_limit": 50,
    "bulk": 10,
    "orm": "default",
}


UNDER_MAINTENANCE = os.getenv("UNDER_MAINTENANCE", "False").lower() in ["t", "true", "1"]
